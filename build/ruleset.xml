<?xml version="1.0"?>
<ruleset name="SlevomatCsobGateway">
	<config name="php_version" value="80100"/>
	<arg name="extensions" value="php"/>
	<arg name="tab-width" value="4"/>
	<arg value="s"/>
	<arg value="p"/>

	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
	<rule ref="Generic.Classes.DuplicateClassName"/>
	<rule ref="Generic.CodeAnalysis.EmptyStatement">
		<exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/><!-- empty catch statements are allowed -->
		<exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedIf"/><!-- allow empty if statements - usually with a comment -->
		<exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedElse"/><!-- allow empty else statements - usually with a comment -->
		<exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedElseif"/><!-- allow empty elseif statements - usually with a comment -->
	</rule>
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.ControlStructures.InlineControlStructure"/>
	<rule ref="Generic.Files.ByteOrderMark"/>
	<rule ref="Generic.Files.InlineHTML"/>
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<rule ref="Generic.Formatting.SpaceAfterCast"/>
	<rule ref="Generic.Formatting.SpaceAfterNot">
		<properties>
			<property name="spacing" value="0"/>
		</properties>
	</rule>
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>
	<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
	<rule ref="Generic.NamingConventions.ConstructorName"/>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
	<rule ref="Generic.PHP.ForbiddenFunctions"/>
	<rule ref="Generic.PHP.LowerCaseConstant"/>
	<rule ref="Generic.PHP.LowerCaseKeyword"/>
	<rule ref="Generic.PHP.LowerCaseType"/>
	<rule ref="Generic.Strings.UnnecessaryStringConcat">
		<properties>
			<property name="allowMultiline" value="true"/>
		</properties>
	</rule>
	<rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
	<rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="tabIndent" value="true"/>
		</properties>
	</rule>
	<rule ref="PEAR.Classes.ClassDeclaration"/>
	<rule ref="PEAR.Commenting.InlineComment"/>
	<rule ref="PEAR.Formatting.MultiLineAssignment"/>
	<rule ref="PEAR.WhiteSpace.ObjectOperatorIndent"/>
	<rule ref="PSR1.Classes.ClassDeclaration"/>
	<rule ref="PSR1.Files.SideEffects"/>
	<rule ref="PSR1.Methods.CamelCapsMethodName"/>
	<rule ref="PSR2.Classes.PropertyDeclaration"/>
	<rule ref="PSR2.ControlStructures.ControlStructureSpacing">
		<exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/><!-- we want to put first expression of multiline condition on next line -->
	</rule>
	<rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>
	<rule ref="PSR2.ControlStructures.SwitchDeclaration">
		<exclude name="PSR2.ControlStructures.SwitchDeclaration.caseIndent"/><!-- checked by more generic Generic.WhiteSpace.ScopeIndent.Incorrect -->
		<exclude name="PSR2.ControlStructures.SwitchDeclaration.defaultIndent"/><!-- checked by more generic Generic.WhiteSpace.ScopeIndent.Incorrect -->
	</rule>
	<rule ref="PSR2.Files.ClosingTag"/>
	<rule ref="PSR2.Files.EndFileNewline"/>
	<rule ref="PSR2.Methods.FunctionCallSignature">
		<exclude name="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket"/><!-- space after closing bracked should be checked depending on where function is called, not as part of the function call -->
	</rule>
	<rule ref="PSR2.Methods.FunctionClosingBrace"/>
	<rule ref="PSR2.Methods.MethodDeclaration"/>
	<rule ref="PSR2.Namespaces.UseDeclaration"/>
	<rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation" />
	<rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement"/>
	<rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace"/>
	<rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
	<rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>
	<rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing"/>
	<rule ref="SlevomatCodingStandard.Classes.ClassStructure">
		<properties>
			<property name="groups" type="array">
				<element value="uses"/>
				<element value="enum cases"/>
				<element value="public constants, protected constants, private constants"/>
				<element value="public properties, public static properties, protected properties, protected static properties, private properties, private static properties"/>
				<element value="constructor"/>
				<element value="static constructors"/>
				<element value="destructor"/>
				<element value="public methods, public final methods, public static final methods, public static methods, protected static methods, private static methods, protected static final methods, private static methods, protected methods, private methods, protected final methods, public abstract methods, protected abstract methods, public static abstract methods, protected static abstract methods"/>
				<element value="magic methods"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Classes.ConstantSpacing">
		<properties>
			<property name="minLinesCountBeforeWithComment" value="0"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Classes.DisallowLateStaticBindingForConstants" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition"/>
	<rule ref="SlevomatCodingStandard.Classes.DisallowMultiPropertyDefinition"/>
	<rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces" />
	<rule ref="SlevomatCodingStandard.Classes.MethodSpacing"/>
	<rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
	<rule ref="SlevomatCodingStandard.Classes.ParentCallSpacing"/>
	<rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
		<properties>
			<property name="minLinesCountBeforeWithComment" value="1"/>
			<property name="maxLinesCountBeforeWithComment" value="1"/>
			<property name="minLinesCountBeforeWithoutComment" value="1"/>
			<property name="maxLinesCountBeforeWithoutComment" value="1"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Classes.RequireConstructorPropertyPromotion"/>
	<rule ref="SlevomatCodingStandard.Classes.RequireMultiLineMethodSignature">
		<properties>
			<property name="minLineLength" value="181"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Classes.RequireSingleLineMethodSignature">
		<properties>
			<property name="maxLineLength" value="80"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming" />
	<rule ref="SlevomatCodingStandard.Classes.SuperfluousInterfaceNaming" />
	<rule ref="SlevomatCodingStandard.Classes.SuperfluousTraitNaming" />
	<rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration" />
	<rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing" />
	<rule ref="SlevomatCodingStandard.Classes.UselessLateStaticBinding" />
	<rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
		<properties>
			<property name="annotationsGroups" type="array">
				<element value="
					@phpcsSuppress,
				"/>
				<element value="
					@dataProvider,
				"/>
				<element value="
					@deprecated,
					@internal,
					@see,
				"/>
				<element value="
					@var,
				"/>
				<element value="
					@param,
					@return,
				"/>
				<element value="
					@phpstan-template,
					@phpstan-template-covariant,
					@phpstan-extends,
					@phpstan-implements,
					@phpstan-var,
					@phpstan-param,
					@phpstan-return,
					@phpstan-,
				"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />
	<rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
		<properties>
			<property name="forbiddenAnnotations" type="array" value="
				@author,
				@created,
				@copyright,
				@license,
				@package,
				@version,
			"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments" />
	<rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
		<properties>
			<property name="forbiddenCommentPatterns" type="array">
				<element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
				<element value="~^Created by .+\.\z~i"/>
				<element value="~^(User|Date|Time): \S+\z~i"/>
				<element value="~^\S+ [gs]etter\.\z~i"/>
				<element value="~^Class \S+\z~i"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration">
		<properties>
			<property name="allowDocCommentAboveReturn" value="true"/>
			<property name="allowAboveNonAssignment" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
	<rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment">
		<properties>
			<property name="traversableTypeHints" type="array">
				<element value="Traversable"/>
			</property>
		</properties>
	</rule>

	<rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition" />
	<rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
		<properties>
			<property name="controlStructures" type="array">
				<element value="switch"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch" />
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator" />
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
		<properties>
			<property name="jumpStatements" type="array">
				<element value="goto"/>
				<element value="throw"/>
				<element value="yield"/>
				<element value="yield_from"/>
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
		<properties>
			<property name="lineLengthLimit" value="180"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireNullSafeObjectOperator"/>
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator">
		<properties>
			<property name="ignoreMultiLine" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn" />
	<rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator" />
	<rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
	<rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
	<rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch"/>
	<rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName">
		<properties>
			<property name="rootNamespaces" type="array" value="
				src => SlevomatCsobGateway,
				tests/unit => SlevomatCsobGateway,
			"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInCall">
		<properties>
			<property name="onlySingleLine" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInClosureUse">
		<properties>
			<property name="onlySingleLine" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInDeclaration">
		<properties>
			<property name="onlySingleLine" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Functions.RequireArrowFunction"/>
	<rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall" />
	<rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse"/>
	<rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration"/>
	<rule ref="SlevomatCodingStandard.Functions.StaticClosure" />
	<rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />
	<rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue" />
	<rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
		<properties>
			<property name="caseSensitive" value="false"/>
			<property name="psr12Compatible" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
	<rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
	<rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
	<rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>
	<rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
		<properties>
			<property name="searchAnnotations" value="true"/>
			<property name="fullyQualifiedKeywords" type="array" value=""/>
			<property name="allowFallbackGlobalFunctions" value="false"/>
			<property name="allowFallbackGlobalConstants" value="false"/>
			<property name="allowFullyQualifiedExceptions" value="false"/>
			<property name="allowFullyQualifiedNameForCollidingClasses" value="true"/>
			<property name="allowFullyQualifiedNameForCollidingFunctions" value="true"/>
			<property name="allowFullyQualifiedNameForCollidingConstants" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly.ReferenceViaFallbackGlobalName">
		<exclude-pattern>src/Api/Driver/CurlDriver.php</exclude-pattern> <!-- tests require fallbacks to mock core functions -->
		<exclude-pattern>src/Crypto/CryptoService.php</exclude-pattern>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile" />
	<rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
		<properties>
			<property name="searchAnnotations" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />
	<rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
	<rule ref="SlevomatCodingStandard.Namespaces.UseSpacing" />
	<rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />

	<rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators" />
	<rule ref="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators.DisallowedPreDecrementOperator"/>
	<rule ref="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators.DisallowedPreIncrementOperator"/>
	<rule ref="SlevomatCodingStandard.Operators.NegationOperatorSpacing"/>
	<rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator" />
	<rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators" />
	<rule ref="SlevomatCodingStandard.Operators.SpreadOperatorSpacing" />
	<rule ref="SlevomatCodingStandard.PHP.DisallowDirectMagicInvokeCall"/>
	<rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking" />
	<rule ref="SlevomatCodingStandard.PHP.ReferenceSpacing"/>
	<rule ref="SlevomatCodingStandard.PHP.RequireNowdoc"/>
	<rule ref="SlevomatCodingStandard.PHP.ShortList" />
	<rule ref="SlevomatCodingStandard.PHP.TypeCast" />
	<rule ref="SlevomatCodingStandard.PHP.UselessParentheses" />
	<rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />
	<rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
		<properties>
			<property name="declareOnFirstLine" value="true"/>
			<property name="linesCountAfterDeclare" value="1"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />
	<rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition" />
	<rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">

		<exclude-pattern>tests/unit/Api/Driver/CurlMock.php</exclude-pattern>
		<exclude-pattern>tests/unit/Api/Driver/Curl_exec_false_Mock.php</exclude-pattern>
		<exclude-pattern>tests/unit/Crypto/GlobalFunctionsMock.php</exclude-pattern>
		<properties>
			<property name="enableMixedTypeHint" value="true"/>
			<property name="enableUnionTypeHint" value="true"/>
			<property name="traversableTypeHints" type="array" value="
				Traversable,
				Generator,
			"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
	<rule ref="SlevomatCodingStandard.Classes.PropertyDeclaration"/>
	<rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
		<properties>
			<property name="enableNativeTypeHint" value="true"/>
			<property name="enableMixedTypeHint" value="true"/>
			<property name="enableUnionTypeHint" value="true"/>
			<property name="traversableTypeHints" type="array" value="
				Traversable,
				Generator,
			"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
		<properties>
			<property name="enableNativeTypeHint" value="true"/>
			<property name="enableMixedTypeHint" value="true"/>
			<property name="enableUnionTypeHint" value="true"/>
			<property name="traversableTypeHints" type="array" value="
				Traversable,
				Generator,
			"/>
		</properties>
		<exclude-pattern>tests/unit/Api/Driver/CurlMock.php</exclude-pattern>
		<exclude-pattern>tests/unit/Api/Driver/Curl_exec_false_Mock.php</exclude-pattern>
		<exclude-pattern>tests/unit/Crypto/GlobalFunctionsMock.php</exclude-pattern>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification">
		<exclude-pattern>tests/</exclude-pattern><!-- it's useless to add "@return mixed[]" to all data providers -->
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
	<rule ref="SlevomatCodingStandard.TypeHints.UnionTypeHintFormat">
		<properties>
			<property name="withSpaces" value="false"/>
			<property name="shortNullable" value="true"/>
			<property name="nullPosition" value="last"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint" />
	<rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable"/>
	<rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />
	<rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
		<properties>
			<property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" value="true"/>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Variables.UselessVariable" />

	<rule ref="Squiz.Arrays.ArrayBracketSpacing">
		<exclude name="Squiz.Arrays.ArrayBracketSpacing.SpaceBeforeBracket"/><!-- does not handle nested array access across multiple lines -->
	</rule>
	<rule ref="Squiz.Arrays.ArrayDeclaration">
		<exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine"/><!-- does not handle wrapped content -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/><!-- expects closing brace at the same level as opening brace -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned"/><!-- we don't want spacing with alignment -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.FirstIndexNoNewline"/><!-- expects multi-value array always written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.FirstValueNoNewline"/><!-- expects multi-value array always written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.IndexNoNewline"/><!-- false positives with nested arrays https://github.com/squizlabs/PHP_CodeSniffer/issues/2937#issuecomment-615262067 -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/><!-- uses indentation of only single space -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/><!-- even a single-value array can be written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.NoComma"/><!-- does not handle nested array access with complex keys on multiple lines; also already checked better by SlevomatCodingStandard.Arrays.TrailingArrayComma -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/><!-- expects multi-value array always written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/><!-- multiple values can be written on a single line -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.ValueNoNewline"/><!-- false positives with nested arrays https://github.com/squizlabs/PHP_CodeSniffer/issues/2937#issuecomment-615262067 -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/><!-- we don't want spacing with alignment -->
	</rule>
	<rule ref="Squiz.Classes.ClassFileName"/>
	<rule ref="Squiz.Classes.SelfMemberReference"/>
	<rule ref="Squiz.Classes.ValidClassName"/>
	<rule ref="Squiz.Commenting.DocCommentAlignment">
		<exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/><!-- space needed for indented annotations -->
	</rule>
	<rule ref="Squiz.Commenting.EmptyCatchComment"/>
	<rule ref="Squiz.ControlStructures.ControlSignature"/>
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
	<rule ref="Squiz.Functions.FunctionDeclaration"/>
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1"/>
		</properties>
		<exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint"/><!-- already checked by SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing.MultipleSpacesBetweenTypeHintAndParameter -->
	</rule>
	<rule ref="Squiz.Functions.GlobalFunction"/>
	<rule ref="Squiz.Functions.GlobalFunction.Found">
		<exclude-pattern>tests/unit/Api/Driver/CurlMock.php</exclude-pattern>
		<exclude-pattern>tests/unit/Api/Driver/Curl_exec_false_Mock.php</exclude-pattern>
		<exclude-pattern>tests/unit/Crypto/GlobalFunctionsMock.php</exclude-pattern>
	</rule>
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace"/><!-- clashes with OpeningFunctionBraceBsdAllman -->
	</rule>
	<rule ref="Squiz.NamingConventions.ValidVariableName">
		<exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore" />
		<exclude-pattern>tests/unit/Crypto/GlobalFunctionsMock.php</exclude-pattern>
	</rule>
	<rule ref="Squiz.Operators.IncrementDecrementUsage">
		<exclude name="Squiz.Operators.IncrementDecrementUsage.NoBrackets"/><!-- afaik there is no need for brackets -->
	</rule>
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>
	<rule ref="Squiz.PHP.CommentedOutCode">
		<type>error</type>
		<properties>
			<property name="maxPercentage" value="50"/>
		</properties>
	</rule>
	<rule ref="Squiz.PHP.GlobalKeyword"/>
	<rule ref="Squiz.PHP.Heredoc"/>
	<rule ref="Squiz.PHP.InnerFunctions"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.Scope.StaticThisUsage"/>
	<rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
			<property name="spacing" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.Strings.DoubleQuoteUsage"/>
	<rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
		<message>Variable "%s" not allowed in double quoted string; use sprintf() instead</message>
	</rule>
	<rule ref="Squiz.Strings.EchoedStrings"/>
	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
	<rule ref="Squiz.WhiteSpace.FunctionSpacing">
		<exclude name="Squiz.WhiteSpace.FunctionSpacing.After"/><!-- does not allow PHPUnit ignore comments -->
		<exclude name="Squiz.WhiteSpace.FunctionSpacing.AfterLast"/><!-- does not allow PHPUnit ignore comments -->
		<properties>
			<property name="spacing" value="1"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.FunctionSpacing.After"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.OperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true"/>
			<property name="ignoreSpacingBeforeAssignments" value="false"/>
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
</ruleset>
